\import lect01 \hiding (+, *)-- 1. Установите arend, следуя инструкциям на странице https://arend-lang.github.io/download
--    В IDEA можно просто импортировать данный проект.

-- 2. Определите аналоги следующих функций на языке хаскелл.
{- Haskell:
   second :: Nat -> Nat -> Nat -> Nat
   second _ y _ = y

   apply :: (Nat -> Nat) -> Nat -> Nat
   apply f x = f x

   compose :: (Nat -> Nat) -> (Nat -> Nat) -> Nat -> Nat
   compose f g x = f (g x)

   flip :: (Nat -> Nat -> Nat) -> Nat -> Nat -> Nat
   flip f x y = f y x

   second' = flip (second 0)
-}

\func second (_ y _ : Nat) => y

\func apply (f : Nat -> Nat) (x : Nat) => f x

\func compose (f g : Nat -> Nat) (x : Nat) => f (g x)

\func flip (f : Nat -> Nat -> Nat) (x y : Nat) => f y x

-- 3. Расставьте приоритеты функций f1, f2, f3, f4, f5 и f6 так, чтобы функция test проходила тайпчекинг.

\func f1 (x y : Nat) => x

\func f2 : Nat => 0

\func \infix 1 f3 (f : Nat -> Nat) (z : Nat) : Int => 0

\func f4 : Nat => 0

\func \infix 2 f5 => f1

\func f6 => f4

\func test => f1 f2 f3 f4 f5 f6

-- 4. Определите функцию if, аналогичную следующей функции:
{- Haskell:
   if :: Bool -> Bool -> Bool -> Bool
   if True t _ = t
   if False _ e = e
-}

\func if (b t e : Bool) : Bool \elim b
  | false => t
  | true => e

-- 5. Определите || через if.

\func \infixr 2 || (x y : Bool) : Bool => if x true y

-- 6. Определите возведение в степень и факториал для натуральных чисел.

\open Nat \hiding (-, div) -- Здесь лежат + и *.

\func \infixr 8 ^ (x y : Nat) : Nat \elim y
  | 0 => 1
  | suc y => x * (x ^ y)

\func powTest1 : 2 ^ 3 = 8 => idp

\func fac (x : Nat) : Nat \elim x
  | 0 => 1
  | 1 => 1
  | suc n => suc n * fac n

\func facTest1 : fac 0 = 1 => idp
\func facTest2 : fac 1 = 1 => idp
\func facTest3 : fac 2 = 2 => idp
\func facTest4 : fac 3 = 6 => idp

-- 7. Определите mod и gcd.

\func mod (x y : Nat) : Nat => go x x y
  \where {
    \func go (s x y : Nat) : Nat \elim s
      | 0 => 0
      | suc s => \case x < y \with {
        | true => x
        | false => go s (x - y) y
      }
  }

\func modTest1 : 4 `mod` 3 = (Nat.mod 4 3) => idp
\func modTest2 : 4 `mod` 4 = (Nat.mod 4 4) => idp
\func modTest3 : 25 `mod` 7 = (Nat.mod 25 7) => idp

\func gcd (a b : Nat) => go (a + b) a b
  \where {
    \func go (s a b : Nat) : Nat \elim s
      | 0 => 1
      | suc s => \case b \with {
        | 0 => a
        | suc n => go s b (a `mod` b)
      }
  }

\func gcdTest1 : gcd 42 56 = 14 => idp
\func gcdTest2 : gcd 0 9 = 9 => idp
\func gcdTest3 : gcd 39 65 = 13 => idp
\func gcdTest4 : gcd 14 21 = 7 => idp
\func gcdTest5 : gcd 8 16 = 8 => idp
\func gcdTest6 : gcd 5 13 = 1 => idp