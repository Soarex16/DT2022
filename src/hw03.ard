\import Algebra.Meta
\import Utils
\import lect03
\open Nat(+,*)

-- 1. Чему равно fileTest (в нормальной форме)? Докажите это.
\func task1 : fileTest = (foobar, 8, 13, 55, 18, 21) => idp

-- 2. Чему равно M5.t''' (в нормальной форме)? Докажите это.

\func task2 : M5.t''' = ((82, 42, 61, 82, 34, 42, 61, 29), 25, (42, 29)) => idp

-- 3. Докажите ассоциативность ++.

\func ++-assoc {A : \Type} (xs ys zs : List A) : (xs ++ ys) ++ zs = xs ++ (ys ++ zs) \elim xs
  | nil => idp
  | :: x xs => pmap (x ::) (++-assoc xs ys zs)

-- 4. Докажите, что reverse (reverse xs) = xs, где reverse определен через ++.

\func reverse {A : \Type} (xs : List A) : List A
  | nil => nil
  | :: x xs => reverse xs ++ x :: nil

-- Это утверждение будет полезно для доказательства.
\func list+nil {A : \Type} (xs : List A) : (xs ++ nil) = xs
  | nil => idp
  | :: x xs => pmap (x :: ) (list+nil xs)

\func reverse++ {A : \Type} (xs ys : List A) : reverse (xs ++ ys) = reverse ys ++ reverse xs \elim xs
  | nil => sym (list+nil (reverse ys))
  | :: x xs =>
    reverse (xs ++ ys) ++ x :: nil ==< pmap (`++ x :: nil) (reverse++ xs ys) >==
    (reverse ys ++ reverse xs) ++ x :: nil ==< ++-assoc (reverse ys) (reverse xs) (x :: nil) >==
    reverse ys ++ (reverse xs ++ x :: nil) `qed

\func reverse-isInvolutive {A : \Type} (xs : List A) : reverse (reverse xs) = xs \elim xs
  | nil => idp
  | :: x xs =>
    reverse (reverse xs ++ x :: nil) ==< reverse++ (reverse xs) (x :: nil) >==
    reverse (x :: nil) ++ reverse (reverse xs) ==< pmap (x ::) (reverse-isInvolutive xs) >==
    x :: xs `qed

-- 5. Докажите дистрибутивность умножения над сложением для натуральных чисел.

\func rdistr (n m k : Nat) : (m + k) * n = m * n + k * n \elim n
  | 0 => idp
  | suc n =>
    ((m + k) * n) + (m + k) ==< pmap (`+ (m + k)) (rdistr n m k) >==
    ((m * n) + k * n) + (m + k) ==< sym (+-assoc ((m * n) + k * n) m k) >==
    (((m * n) + k * n) + m) + k ==< pmap (`+ k) (+-assoc (m * n) (k * n) m) >==
    ((m * n) + (k * n + m)) + k ==< pmap (`+ k) (pmap (m * n +) (+-comm (k * n) m)) >==
    ((m * n) + (m + k * n)) + k ==< pmap (`+ k) (sym (+-assoc (m * n) m (k * n))) >==
    (((m * n) + m) + k * n) + k ==< +-assoc ((m * n) + m) (k * n) k >==
    ((m * n) + m) + (k * n + k) `qed

\func ldistr (n m k : Nat) : n * (m + k) = n * m + n * k \elim k
  | 0 => idp
  | suc k =>
    n * (m + k) + n ==< pmap (`+ n) (ldistr n m k) >==
    (n * m + n * k) + n ==< +-assoc (n * m) (n * k) n >==
    n * m + (n * k + n) `qed

-- 6. Определите конгруэнтность для функций двух аргументов через transport.
--    Можно использовать любые функции, определенные через transport.

\func pmap2 {A B C : \Type} (f : A -> B -> C) {a a' : A} (p : a = a') {b b' : B} (q : b = b') : f a b = f a' b' =>
  f a b ==< transport (\lam x => f a b = f x b) p idp >==
  f a' b ==< transport (\lam y => f a' b = f a' y) q idp >==
  f a' b' `qed

-- 7. Докажите, что transport выражается через pmap и repl и наоборот.

-- repl говорит, что если у нас есть два равных типа, то у нас есть функция из одного во второй.
-- Определите repl через transport.

\func repl {A B : \Type} (p : A = B) (a : A) : B => transport (\lam x => x) p a

-- Определите transport через repl и pmap.

-- \func transport  (B : A -> \Type) (p : a = a') : B a -> B a' - если есть операция и одинаковые элементы,
-- то можем из одного получить другой

-- \func repl       (p : A = B) : A -> B - если типы равны, то есть функция из типа в тип
-- \func pmap       (f : A -> B) (p : a = a') : f a = f a' - если элементы равны, то результаты операции над ними равны

\func transport' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' => repl (pmap B p) b