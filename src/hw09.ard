\import Data.List
\import Meta
\import Order.LinearOrder
\import Paths.Meta
\import Utils (Maybe, just, maybe, nothing)
\import hw07
\import lect07(Decide, no, yes)
\import lect09
\open LinearOrder

-- 1. Закончите определение \instance Monad для Term.

\instance TermMonad : Monad Term
  | return => var
  | >>= {A B : \Set} (t : Term A) (k : A -> Term B) : Term B \elim t {
    | var v => k v
    | unit => unit
    | app t1 t2 => app (t1 >>= k) (t2 >>= k)
    | lam t => lam (t >>= liftM k)
  }
  | return-left => \lam a k => idp
  | return-right {A : \Set} (m : Term A) : m >>= return = m \elim m {
    | app t1 t2 =>
      \let
        | x1 => unfold return (return-right t1)
        | x2 => unfold return (return-right t2)
      \in rewrite x1 (rewrite x2 idp)
    | lam t => unfold return (unfold liftM {?})
    | var v => idp
    | unit => idp
  }
  | >>=-assoc {A B C : \Set} (m : Term A) (k : A -> Term B) (l : B -> Term C) : (m >>= k) >>= l = m >>= (\lam x => k x >>= l) \elim m {
    | app m1 m2 =>
      \let
        | x1 => >>=-assoc m1 k l
        | x2 => >>=-assoc m2 k l
      \in rewrite x1 (rewrite x2 idp)
    | lam m => {?} -- pmap lam (rewrite (term-lemma m just {?}) {?})
    | var v => idp
    | unit => idp
  }

\func term-lemma {A B C : \Set} (a : Term A) (f : A -> B) (k : B -> Term C) : termMap f a >>= k = a >>= (\lam x => k (f x)) \elim a
  | app a1 a2 =>
    \let
      | x1 => term-lemma a1 f k
      | x2 => term-lemma a2 f k
    \in {?}
  | lam a => {?}
  | var v => idp
  | unit => idp

-- 2. Определите отношение многошаговой редукции на Term.

\func Red {V : \Set} (t s : Term V) : \Type => ReflTransClosure Red1 t s

-- 3. Стратегия редукции -- это функция, которая каждому терму сопоставляет либо некоторый терм, к которому он редуцируется за 1 шаг, либо доказательство, что таких термов нет.
--    Определите любую стратегию редукции.

\func strategy {V : \Set} (t : Term V) : Decide (\Sigma (s : Term V) (Red1 t s)) \elim t
  | app (lam a) s => yes (a lect09.TermMonad.>>= maybe s var, redBeta idp idp)
  | app t1 t2 => {?}
  | lam t => \case strategy t \with {
    | yes t=>t' => yes (lam t=>t'.1, redLam t=>t'.2)
    | no n => no (\lam x =>
        \let
          | x1 => x.1
          | x2 => x.2
        \in n (termMap just x1, {?})
     )
  }
  | var v => no (\lam x => \case x.2)
  | unit => no (\lam x => \case x.2)

\func test-normal-strategy : eval (app (lam (var nothing)) (var 1)) (acc acc-lemma) strategy = (var 1, {?}) => idp
  \where {
    \func acc-lemma : \Pi (a' : Term Nat) -> Red1 (app (lam (var nothing)) (var 1)) a' -> Acc Red1 a' => {?}
  }

-- 4. Докажите, что подтермы достижимого терма достижимы.

\func appAccLeft {V : \Set} {t s : Term V} (a : Acc Red1 (app t s)) : Acc Red1 t
  => {?}

\func appAccRight {V : \Set} {t s : Term V} (a : Acc Red1 (app t s)) : Acc Red1 s
  => {?}

\func subLamAcc {V : \Set} {t : Term (Maybe V)} (a : Acc Red1 (lam t)) : Acc Red1 t
  => {?}

-- 5. Докажите следующую обобщенную лемму о подстановке и выведите из нее обычную версию: если Г, x : A |- b : B и Г |- a : A, то Г |- b[a/x] : B.

\func substLem {U V : \Set} (ctx : U -> Type) (b : Term U) (B : Type) (h : hasType ctx b B)
               (ctx' : V -> Type) (a : U -> Term V) (h' : \Pi (u : U) -> hasType ctx' (a u) (ctx u))
  : hasType ctx' (b >>= a) B
  => {?}

\func substLem1 => {?}

-- 6. Докажите, что если Г |- a : A и Red a a', то Г |- a' : A

\func redLem {V : \Set} {ctx : V -> Type} {a a' : Term V} (r : Red a a') {A : Type} (h : hasType ctx a A)
  : hasType ctx a' A
  => {?}

-- Optional
-- 7. Для доказательства typeableInterp понадобится вспомогательное утверждение. Докажите его.

\data HeadRed {V : \Set} (a t s : Term V) \elim t, s
  | app t1 t2, app s1 s2 => headApp (HeadRed a t1 s1) (t2 = s2)
  | app t a', s => headBeta {f : Term (Maybe V)} (a = a') (lam f = t) (f >>= maybe a var = s)

\func redInterp {V : \Set} {a t s : Term V} {T : Type} (r : HeadRed a t s) (acc : Acc Red1 a) (q : Interp T s) : Interp T t
  => {?}

-- 8. Докажите typeableInterp из лекции